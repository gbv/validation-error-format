#!.venv/bin/python

import xml.etree.ElementTree as ET
import xmlschema
import json
import sys
import argparse
from textwrap import indent

from validation_error import ValidationError, Locator

schema = None

parser = argparse.ArgumentParser("xml-validate")
parser.add_argument("-s", "--schema", help="Schema file (XSD)", type=str)
parser.add_argument(
    "file", help="XML file (- for stdin)", nargs="*", type=str, default=["-"]
)
args = parser.parse_args()

nested = len(args.file) > 1

if args.schema:
    schema = xmlschema.XMLSchema(args.schema)


def xmlSchemaErrors(schema, tree):
    return [
        ValidationError(e.reason, position={"xpath": e.path} if e.path else None)
        for e in schema.iter_errors(tree)
    ]


def validate(file):
    global nested

    # Parse XML
    tree = None
    try:
        tree = ET.parse(sys.stdin if file == "-" else file)
    except ET.ParseError as e:
        line, col = e.position
        pos = {"line": line}
        if col > 0:
            pos["linecol"] = f"{line}:{col}"
        types = [f"expat-error-code:{e.code}"]
        error = ValidationError(e, position=pos, types=types)
        if nested or file != "-":
            locator = Locator("file", file, errors=[error])
            error = ValidationError(
                f"file {file} is not well-formed", position=[locator]
            )
        yield error

    if tree:
        # TODO: DTD validation with embedded DTD (with lxml)
        # TODO: Schematron validation with pyschematron
        if schema:
            errors = xmlSchemaErrors(schema, tree)
            if file != "-" or (len(errors) and nested):
                message = f"file {file} is invalid against XML Schema"
                locator = Locator("file", file, errors=errors)
                yield ValidationError(message, position=[locator])
            else:
                if len(errors):
                    yield from errors
                else:
                    yield None
        else:
            yield None


valid = True

print("[")
for i, file in enumerate(args.file):
    for error in validate(file):
        if i > 0:
            print(",")
        if error:
            valid = False
            print(indent(json.dumps(error.to_dict(), indent=2), "  "), end="")
        else:
            print("  true", end="")
print("\n]" if len(args.file) > 0 else "]")

sys.exit(0 if valid else 2)
