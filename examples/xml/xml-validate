#!.venv/bin/python

import xml.etree.ElementTree as ET
import xmlschema
import json
import sys
import argparse
from textwrap import indent

from validation_error import ValidationError

schema = None

parser = argparse.ArgumentParser("xml-validate")
parser.add_argument("-s", "--schema", help="Schema file (XSD)", type=str)
parser.add_argument(
    "file", help="XML file (- for stdin)", nargs="*", type=str, default=["-"]
)
args = parser.parse_args()

nested = len(args.file) > 1

if args.schema:
    schema = xmlschema.XMLSchema(args.schema)


def mapSchemaError(e):
    error = {"message": e.reason}
    if e.path is not None:
        error["position"] = {"xpath": e.path}
    return error


def validate(file):
    global nested

    # Parse XML
    tree = None
    try:
        tree = ET.parse(sys.stdin if file == "-" else file)
    except ET.ParseError as e:
        line, col = e.position
        error = {
            "message": str(e),
            "position": {
                "line": line,
            },
            "type": [f"expat-error-code:{e.code}"],
        }
        if col > 0:
            error["position"]["linecol"] = f"{line}:{col}"
        if nested or file != "-":
            error["format"] = "file"
            error["value"] = file
            error = ValidationError(f"file {file} is not well-formed", position=[error])
        yield error

    if tree:
        # TODO: DTD validation with embedded DTD (with lxml)
        # TODO: Schematron validation with pyschematron
        if schema:
            errors = [mapSchemaError(e) for e in schema.iter_errors(tree)]
            if file != "-" or (len(errors) and nested):
                message = (f"file {file} is invalid against XML Schema",)
                position = [
                    {
                        "format": "file",
                        "value": file,
                        "position": errors,
                    }
                ]
                yield ValidationError(message, position=position)
            else:
                if len(errors):
                    yield from errors
                else:
                    yield None
        else:
            yield None


valid = True

print("[")
for i, file in enumerate(args.file):
    for status in validate(file):
        if i > 0:
            print(",")
        if status:
            valid = False
            if isinstance(status, ValidationError):
                status = status.__dict__
            print(indent(json.dumps(status, indent=2), "  "), end="")
        else:
            print("  true", end="")
print("\n]" if len(args.file) > 0 else "]")

sys.exit(0 if valid else 2)
